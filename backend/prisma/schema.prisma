// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  location String?
  PhoneNumber String?
  role     Role      @default(Renter)
  approved Boolean   @default(false) 
  active   Boolean   @default(true)
  wallet   Float     @default(0.0)
  books    Book[]
  rentals  Rental[]  
  revenues Revenue[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Book {
  id                 Int       @id @default(autoincrement())
  title              String
  author             String
  category           Category  @relation(fields: [categoryId], references: [id])
  categoryId         Int
  quantity           Int
  availabilityStatus String    @default("Available")
  registered         Boolean   @default(false)
  owner              User      @relation(fields: [ownerId], references: [id])
  ownerId            Int
  rentals            Rental[]
  revenues           Revenue[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Rental {
  id         Int      @id @default(autoincrement())
  rentalDate DateTime @default(now())
  returnDate DateTime?
  status     String   @default("Rented")
  book       Book     @relation(fields: [bookId], references: [id])
  bookId     Int
  renter     User     @relation(fields: [renterId], references: [id])
  renterId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Revenue {
  id      Int      @id @default(autoincrement())
  amount  Float
  date    DateTime @default(now())
  book    Book     @relation(fields: [bookId], references: [id])
  bookId  Int
  owner   User     @relation(fields: [ownerId], references: [id])
  ownerId Int
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]
}

enum Role {
  Admin
  Owner
  Renter
}
